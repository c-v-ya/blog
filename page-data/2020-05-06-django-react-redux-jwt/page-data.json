{"componentChunkName":"component---src-templates-post-template-js","path":"/2020-05-06-django-react-redux-jwt","result":{"data":{"markdownRemark":{"frontmatter":{"date":"May 06, 2020","title":"Django + React, Redux and JWT","path":"/2020-05-06-django-react-redux-jwt","description":"On the way to a full stack dev","tags":"python, django, react, redux, jwt"},"html":"<h1>Preface</h1>\n<p>For the past 4 years I've been coding in Python and when it comes to web I always go with Django + Bootstrap and jQuery. I also know how to style a page with css but nothing super fancy. And I always stayed far away from modern SPAs and their frameworks/libraries such as React, Angular or Vue. I tried it once and the experience was horrible. I knew nothing about babel, webpack, yarn and how it all glues together. Not to mention arrow functions and destructuring in JS. But eventually I decided to try it one more time and spent I-don't-know-how-many hours watching tutorials on React. So now this is my attempt to make Django backend work with React frontend.</p>\n<p>The goal of this article is to have a minimal backend with JSON Web Token authentication and simple frontend with login/logout functionality as well as a protected page for logged-in users only. And this is mostly for me to try to make it all work. So if and when I'll need to reproduce the steps in the future I could just review what I did and repeat the steps. And for that reason I decided to:</p>\n<ul>\n<li>leave the default SQLite database so it could be replaced with what's needed</li>\n<li>not to use any UI frameworks or any styles, because that would be opinionated and not suitable for every project</li>\n</ul>\n<p>One more thing to note. I won't get in much details about the code listed here. There are tons of useful information out there if you want to really understand things. I'll list every resource that helped me on my way. This is just a how-to guide. And the complete code is available on my <a href=\"https://github.com/c-v-ya/djact\">github</a>, as well as <a href=\"https://gitlab.com/c.v.ya/djact\">gitlab</a>.</p>\n<p>With all that out of the way, embrace yourself for a long read! And I hope it will be of any use to you ðŸ˜Š</p>\n<h1>Prerequisites</h1>\n<p>You'll need to have following packages installed on your system: python (version 3, no legacy code here ðŸ˜Ž), pip, node, npm, yarn. I'm using the Arch linux, so commands listed should be the same or similar to any other Unix-like system.</p>\n<p>Let's start with creating a project directory, <code class=\"language-text\">mkdir djact</code> and <code class=\"language-text\">cd</code> into it. Then create virtual environment with <code class=\"language-text\">python -m venv venv</code> and activate it - <code class=\"language-text\">source venv/bin/activate</code>.</p>\n<h1>Creating Django project</h1>\n<p>Install Django, REST Framework and JWT handling with <code class=\"language-text\">pip install django djangorestframework djangorestframework-simplejwt django-cors-headers</code>. The last package is necessary to allow our development react server to interact with Django app. And let's save our dependencies after we install something: <code class=\"language-text\">pip freeze &gt; requirements.txt</code>. Now start a new project <code class=\"language-text\">django-admin startproject djact .</code>. Note the <code class=\"language-text\">.</code> in the end, that's telling Django to create project in current directory.</p>\n<h2>Apps</h2>\n<p>I like all my apps in a separate directory as well as settings. So let's make it: <code class=\"language-text\">mkdir djact/{apps, settings}</code>. And move <code class=\"language-text\">setting.py</code> in a newly created settings directory. To make <code class=\"language-text\">settings</code> a package <code class=\"language-text\">touch djact/settings/__init__.py</code> and insert following lines in there:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/settings/__init__.py\nfrom .settings import *</code>\n        </deckgo-highlight-code>\n      \n<p>Here and in every file listing first line will be a comment with a relative path to the file. Just so you know.</p>\n<p>This way we won't need to override the <code class=\"language-text\">DJANGO_SETTINGS_MODULE</code> variable.</p>\n<h3>Core</h3>\n<p>Now create a directory for the core app <code class=\"language-text\">mkdir djact/apps/core</code> and the app itself <code class=\"language-text\">python manage.py startapp core djact/apps/core</code>. Inside this newly created directory <code class=\"language-text\">mkdir {templates,templatetags}</code>.\nCreate an empty <code class=\"language-text\">__init__.py</code> and react loader templatetag <code class=\"language-text\">load_react.py</code> inside <code class=\"language-text\">templatetags</code> dir:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/apps/core/templatetags/load_react.py\nfrom django import template\nfrom django.conf import settings\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef load_react():\n    css = load_css()\n    js = load_js()\n    return mark_safe(&#39;&#39;.join(css + js))\n\n\ndef load_css():\n    return [\n        f&#39;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/{asset}&quot;/&gt;&#39;\n        for asset in load_files(&#39;.css&#39;)\n    ]\n\n\ndef load_js():\n    return [\n        f&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/static/{asset}&quot;&gt;&lt;/script&gt;&#39;\n        for asset in load_files(&#39;.js&#39;)\n    ]\n\n\ndef load_files(extension: str):\n    files = []\n    for path in settings.STATICFILES_DIRS:\n        for file_name in path.iterdir():\n            if file_name.name.endswith(extension):\n                files.append(file_name.name)\n\n    return files</code>\n        </deckgo-highlight-code>\n      \n<p>I know there is a <a href=\"https://github.com/owais/django-webpack-loader\">django-webpack-loader</a> but I prefer a simpler approach like the above.</p>\n<p>Next create <code class=\"language-text\">index.html</code> with the following content inside <code class=\"language-text\">templates</code> dir:</p>\n\n        <deckgo-highlight-code language=\"jinja\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">{# djact/apps/core/templates/index.html #}\n{% load static %}\n{% load load_react %}\n&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;/&gt;\n        &lt;title&gt;Djact&lt;/title&gt;\n        &lt;link rel=&quot;icon&quot; href=&quot;{% static &#39;favicon.ico&#39; %}&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n        {% load_react %}\n    &lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n      \n<h3>Authentication</h3>\n<p>Next we need an app for authentication, so <code class=\"language-text\">mkdir djact/apps/authentication</code> and <code class=\"language-text\">python manage.py startapp authentication djact/apps/authentication</code>. Inside this directory edit the <code class=\"language-text\">models.py</code> file:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/apps/authentication/models.py\nfrom django.contrib.auth.models import AbstractUser\n\n\nclass User(AbstractUser):\n    class Meta:\n        verbose_name = &#39;User&#39;\n        verbose_name_plural = &#39;Users&#39;\n\n    def __str__(self):\n        return f&#39;&lt;{self.id}&gt; {self.username}&#39;</code>\n        </deckgo-highlight-code>\n      \n<p>Next we need a serializer for users to sign up <code class=\"language-text\">djact/apps/authentication/serializers.py</code>:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/apps/authentication/serializers.py\nfrom rest_framework import serializers\n\nfrom .models import User\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(required=True)\n    username = serializers.CharField()\n    password = serializers.CharField(min_length=8, write_only=True)\n\n    class Meta:\n        model = User\n        fields = (&#39;email&#39;, &#39;username&#39;, &#39;password&#39;)\n        extra_kwargs = {&#39;password&#39;: {&#39;write_only&#39;: True}}\n\n    def create(self, validated_data):\n        password = validated_data.pop(&#39;password&#39;, None)\n        instance = self.Meta.model(**validated_data)\n        if password is not None:\n            instance.set_password(password)\n\n        instance.save()\n\n        return instance</code>\n        </deckgo-highlight-code>\n      \n<p>Then the view <code class=\"language-text\">djact/apps/authentication/views.py</code>:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/apps/authentication/views.py\nfrom rest_framework import permissions\nfrom rest_framework.generics import CreateAPIView\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nfrom .serializers import UserSerializer\n\n\nclass UserCreate(CreateAPIView):\n    permission_classes = (permissions.AllowAny,)\n    authentication_classes = ()\n    serializer_class = UserSerializer\n\n\nuser_create = UserCreate.as_view()\n\n\nclass Protected(APIView):\n    def get(self, request):\n        return Response(data={&#39;type&#39;: &#39;protected&#39;})\n\n\nprotected = Protected.as_view()</code>\n        </deckgo-highlight-code>\n      \n<p>The <code class=\"language-text\">Protected</code> view is to check that we can access the page only after logging in.</p>\n<p>And for the urls we'll have paths to our two views and also to obtain and refresh JWT:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/apps/authentication/urls.py\nfrom django.urls import path\nfrom rest_framework_simplejwt import views as jwt_views\n\nfrom . import views\n\napp_name = &#39;authentication&#39;\nurlpatterns = [\n    path(\n        &#39;users/create/&#39;,\n        views.user_create,\n        name=&#39;sign-up&#39;\n    ),\n    path(\n        &#39;token/obtain/&#39;,\n        jwt_views.TokenObtainPairView.as_view(),\n        name=&#39;token-create&#39;\n    ),\n    path(\n        &#39;token/refresh/&#39;,\n        jwt_views.TokenRefreshView.as_view(),\n        name=&#39;token-refresh&#39;\n    ),\n    path(\n        &#39;protected/&#39;,\n        views.protected,\n        name=&#39;protected&#39;\n    )\n]</code>\n        </deckgo-highlight-code>\n      \n<p>Update main <code class=\"language-text\">urls.py</code> at <code class=\"language-text\">djact</code>:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(&#39;admin/&#39;, admin.site.urls),\n    path(&#39;api/&#39;, include(&#39;djact.apps.authentication.urls&#39;)),\n]</code>\n        </deckgo-highlight-code>\n      \n<h3>Settings</h3>\n<p>I love the new <code class=\"language-text\">Pathlib</code> module so lets rewrite everything using this instead of <code class=\"language-text\">os</code>. I'm using <code class=\"language-text\">django-environ</code> to handle environment variables so let's install that <code class=\"language-text\">pip install django-environ &amp;&amp; pip freeze &gt; requirements.txt</code>. Copy <code class=\"language-text\">DJANGO_SECRET_KEY</code> from existing config so you won't need to generate a new one (although it's easy). We'll put that in a <code class=\"language-text\">.env</code> file.</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/settings/settings.py\nimport pathlib\nfrom datetime import timedelta\n\nimport environ\n\nBASE_DIR = pathlib.Path(__file__).parent.parent\nPROJECT_ROOT = BASE_DIR.parent\n\nenv = environ.Env()\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env.str(&#39;DJANGO_SECRET_KEY&#39;)\n\n# SECURITY WARNING: don&#39;t run with debug turned on in production!\nDEBUG = env.bool(&#39;DJANGO_DEBUG&#39;, False)\n\nALLOWED_HOSTS = env.list(&#39;DJANGO_ALLOWED_HOSTS&#39;, default=list())\n\n# Application definition\n\nINSTALLED_APPS = [\n    &#39;djact.apps.authentication&#39;,\n    &#39;djact.apps.core&#39;,\n\n    &#39;rest_framework&#39;,\n\n    &#39;django.contrib.admin&#39;,\n    &#39;django.contrib.auth&#39;,\n    &#39;django.contrib.contenttypes&#39;,\n    &#39;django.contrib.sessions&#39;,\n    &#39;django.contrib.messages&#39;,\n    &#39;django.contrib.staticfiles&#39;,\n]\n\nMIDDLEWARE = [\n    &#39;django.middleware.security.SecurityMiddleware&#39;,\n    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,\n    &#39;django.middleware.common.CommonMiddleware&#39;,\n    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,\n    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,\n    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,\n    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,\n]\n\nROOT_URLCONF = &#39;djact.urls&#39;\n\nTEMPLATES = [\n    {\n        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,\n        &#39;APP_DIRS&#39;: True,\n        &#39;OPTIONS&#39;: {\n            &#39;context_processors&#39;: [\n                &#39;django.template.context_processors.debug&#39;,\n                &#39;django.template.context_processors.request&#39;,\n                &#39;django.contrib.auth.context_processors.auth&#39;,\n                &#39;django.contrib.messages.context_processors.messages&#39;,\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = &#39;djact.wsgi.application&#39;\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    &#39;default&#39;: {\n        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,\n        &#39;NAME&#39;: str(BASE_DIR.joinpath(&#39;db.sqlite3&#39;)),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        &#39;NAME&#39;: &#39;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#39;,\n    },\n    {\n        &#39;NAME&#39;: &#39;django.contrib.auth.password_validation.MinimumLengthValidator&#39;,\n    },\n    {\n        &#39;NAME&#39;: &#39;django.contrib.auth.password_validation.CommonPasswordValidator&#39;,\n    },\n    {\n        &#39;NAME&#39;: &#39;django.contrib.auth.password_validation.NumericPasswordValidator&#39;,\n    },\n]\n\nAUTH_USER_MODEL = &#39;authentication.User&#39;\n\nREST_FRAMEWORK = {\n    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (\n        &#39;rest_framework.permissions.IsAuthenticated&#39;,\n    ),\n    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (\n        &#39;rest_framework_simplejwt.authentication.JWTAuthentication&#39;,\n    ),  #\n}\nSIMPLE_JWT = {\n    &#39;ACCESS_TOKEN_LIFETIME&#39;: timedelta(minutes=30),\n    &#39;REFRESH_TOKEN_LIFETIME&#39;: timedelta(days=30),\n    &#39;ROTATE_REFRESH_TOKENS&#39;: True,\n    &#39;BLACKLIST_AFTER_ROTATION&#39;: False,\n    &#39;ALGORITHM&#39;: &#39;HS256&#39;,\n    &#39;SIGNING_KEY&#39;: SECRET_KEY,\n    &#39;VERIFYING_KEY&#39;: None,\n    &#39;AUTH_HEADER_TYPES&#39;: (&#39;JWT&#39;,),\n    &#39;USER_ID_FIELD&#39;: &#39;id&#39;,\n    &#39;USER_ID_CLAIM&#39;: &#39;user_id&#39;,\n    &#39;AUTH_TOKEN_CLASSES&#39;: (&#39;rest_framework_simplejwt.tokens.AccessToken&#39;,),\n    &#39;TOKEN_TYPE_CLAIM&#39;: &#39;token_type&#39;,\n}\n\nLOGIN_URL = &#39;/login&#39;\nLOGIN_REDIRECT_URL = &#39;/&#39;\nLOGOUT_REDIRECT_URL = &#39;/login&#39;\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = &#39;ru&#39;\n\nTIME_ZONE = &#39;Europe/Moscow&#39;\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = &#39;/static/&#39;\nSTATICFILES_DIRS = [\n    PROJECT_ROOT.joinpath(&#39;static&#39;),\n]\n\nSTATIC_ROOT = PROJECT_ROOT / &#39;public&#39; / &#39;static&#39;\npathlib.Path(STATIC_ROOT).mkdir(exist_ok=True, parents=True)\n\nMEDIA_URL = &#39;/media/&#39;\nMEDIA_ROOT = PROJECT_ROOT / &#39;public&#39; / &#39;media&#39;\npathlib.Path(MEDIA_ROOT).mkdir(exist_ok=True, parents=True)\n\n# Logging\n\nLOG_DIR = PROJECT_ROOT / &#39;log&#39;\nLOG_DIR.mkdir(exist_ok=True)\n\nLOGGING = {\n    &#39;version&#39;: 1,\n    &#39;disable_existing_loggers&#39;: False,\n    &#39;formatters&#39;: {\n        &#39;console&#39;: {\n            &#39;format&#39;: &#39;%(levelname)-8s %(name)-12s %(module)s:%(lineno)s\\n&#39;\n                      &#39;%(message)s&#39;\n        },\n        &#39;file&#39;: {\n            &#39;format&#39;: &#39;%(asctime)s %(levelname)-8s %(name)-12s &#39;\n                      &#39;%(module)s:%(lineno)s\\n%(message)s&#39;\n        },\n    },\n    &#39;handlers&#39;: {\n        &#39;console&#39;: {\n            &#39;class&#39;: &#39;logging.StreamHandler&#39;,\n            &#39;formatter&#39;: &#39;console&#39;,\n        },\n        &#39;file&#39;: {\n            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,\n            &#39;formatter&#39;: &#39;file&#39;,\n            &#39;filename&#39;: LOG_DIR / &#39;django.log&#39;,\n            &#39;backupCount&#39;: 10,  # keep at most 10 files\n            &#39;maxBytes&#39;: 5 * 1024 * 1024  # 5MB\n        },\n    },\n    &#39;loggers&#39;: {\n        &#39;django.request&#39;: {\n            &#39;handlers&#39;: [&#39;console&#39;, &#39;file&#39;],\n            &#39;level&#39;: &#39;DEBUG&#39;,\n            &#39;propagate&#39;: True,\n        },\n    },\n}\n\nLOGGING[&#39;loggers&#39;].update(\n    {app: {\n        &#39;handlers&#39;: [&#39;console&#39;, &#39;file&#39;],\n        &#39;level&#39;: &#39;DEBUG&#39;,\n        &#39;propagate&#39;: True,\n    } for app in INSTALLED_APPS}\n)\n\n# Load dev config\n\nif DEBUG:\n    try:\n        from .dev import *\n    except ModuleNotFoundError:\n        print(&#39;Dev config not found&#39;)</code>\n        </deckgo-highlight-code>\n      \n<p>We can override some settings or add something related only to dev environment in <code class=\"language-text\">djact/settings/dev.py</code> that's why we need last 5 lines. My <code class=\"language-text\">dev.py</code> is looking like this:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/settings/dev.py\nfrom .settings import LOGGING, INSTALLED_APPS, MIDDLEWARE\n\nLOGGING[&#39;handlers&#39;][&#39;file&#39;][&#39;backupCount&#39;] = 1\n\nINSTALLED_APPS += [&#39;corsheaders&#39;]\nCORS_ORIGIN_ALLOW_ALL = True\nMIDDLEWARE.insert(2, &#39;corsheaders.middleware.CorsMiddleware&#39;)</code>\n        </deckgo-highlight-code>\n      \n<p>Here we tell Django to allow interacting with our react dev server, which will be running on different port and therefore considered as cross origin.</p>\n<p>Our .env.example file is looking like this:</p>\n\n        <deckgo-highlight-code   theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">&lt;!-- .env.example --&gt;\nPYTHONDONTWRITEBYTECODE=1\n\nDJANGO_SECRET_KEY=random long string\nDJANGO_DEBUG=True for dev environment|False or omit completely for production\nDJANGO_ALLOWED_HOSTS=localhost,127.0.0.1:8000,0.0.0.0:8000</code>\n        </deckgo-highlight-code>\n      \n<p>So, create a <code class=\"language-text\">.env</code> file with those variables.</p>\n<p>Now create <code class=\"language-text\">urls.py</code> inside <code class=\"language-text\">djact/apps/core/</code> directory containing:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/apps/core/urls.py\nfrom django.urls import re_path\nfrom django.views.generic import TemplateView\n\napp_name = &#39;core&#39;\nurlpatterns = [\n    re_path(r&#39;^.*$&#39;, TemplateView.as_view(template_name=&#39;index.html&#39;), name=&#39;index&#39;),\n]</code>\n        </deckgo-highlight-code>\n      \n<p>And update main urls file:</p>\n\n        <deckgo-highlight-code language=\"python\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\"># djact/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(&#39;admin/&#39;, admin.site.urls),\n    path(&#39;api/&#39;, include(&#39;djact.apps.authentication.urls&#39;)),\n    path(&#39;&#39;, include(&#39;djact.apps.core.urls&#39;)),\n]</code>\n        </deckgo-highlight-code>\n      \n<p>Then run <code class=\"language-text\">python manage.py makemigrations</code> and <code class=\"language-text\">python manage.py migrate</code>.</p>\n<p>Our directory structure should look like this:</p>\n\n        <deckgo-highlight-code   theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">.\nâ”œâ”€â”€ djact\nâ”‚   â”œâ”€â”€ apps\nâ”‚   â”‚   â”œâ”€â”€ authentication\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ apps.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ migrations\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ 0001_initial.py\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ __init__.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ models.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ serializers.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ urls.py\nâ”‚   â”‚   â”‚   â””â”€â”€ views.py\nâ”‚   â”‚   â””â”€â”€ core\nâ”‚   â”‚       â”œâ”€â”€ admin.py\nâ”‚   â”‚       â”œâ”€â”€ apps.py\nâ”‚   â”‚       â”œâ”€â”€ __init__.py\nâ”‚   â”‚       â”œâ”€â”€ migrations\nâ”‚   â”‚       â”‚   â””â”€â”€ __init__.py\nâ”‚   â”‚       â”œâ”€â”€ templates\nâ”‚   â”‚       â”‚   â””â”€â”€ index.html\nâ”‚   â”‚       â”œâ”€â”€ templatetags\nâ”‚   â”‚       â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚       â”‚   â””â”€â”€ load_react.py\nâ”‚   â”‚       â””â”€â”€ urls.py\nâ”‚   â”œâ”€â”€ asgi.py\nâ”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”œâ”€â”€ settings\nâ”‚   â”‚   â”œâ”€â”€ dev.py\nâ”‚   â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚   â””â”€â”€ settings.py\nâ”‚   â”œâ”€â”€ urls.py\nâ”‚   â””â”€â”€ wsgi.py\nâ”œâ”€â”€ .env\nâ”œâ”€â”€ .env.example\nâ”œâ”€â”€ manage.py\nâ””â”€â”€ requirements.txt</code>\n        </deckgo-highlight-code>\n      \n<h1>Creating React application</h1>\n<p>Let's <code class=\"language-text\">mkdir</code> for our React frontend and dive into it - <code class=\"language-text\">mkdir frontend &amp;&amp; cd frontend</code>.</p>\n<p>First initialize the frontend project with <code class=\"language-text\">yarn init</code> and answer the questions. Here is my example:</p>\n\n        <deckgo-highlight-code   theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">$ yarn init\nyarn init v1.22.4\nquestion name (frontend): djact\nquestion version (1.0.0):\nquestion description: Django + React\nquestion entry point (index.js):\nquestion repository url:\nquestion author: Constantine\nquestion license (MIT):\nquestion private:\nsuccess Saved package.json\nDone in 34.53s.</code>\n        </deckgo-highlight-code>\n      \n<p>Now we can add dependencies with <code class=\"language-text\">yarn add react react-dom axios react-redux redux redux-thunk reselect</code>. And our dev dependencies with <code class=\"language-text\">yarn add -D eslint babel-eslint babel-polyfill eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-loader style-loader css-loader postcss-loader webpack-dev-server mini-css-extract-plugin cssnano html-webpack-plugin npm-run-all rimraf redux-immutable-state-invariant webpack webpack-cli babel-loader @babel/core @babel/node @babel/preset-env @babel/preset-react</code>.</p>\n<h2>Configuring</h2>\n<p>Create <code class=\"language-text\">.eslintrc.js</code> in current directory with following content:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/.eslintrc.js\nmodule.exports = {\n  parser: &quot;babel-eslint&quot;,\n  env: {\n    browser: true,\n    commonjs: true,\n    es6: true,\n    node: true,\n    jest: true,\n  },\n  parserOptions: {\n    ecmaVersion: 2020,\n    ecmaFeatures: {\n      impliedStrict: true,\n      jsx: true,\n    },\n    sourceType: &quot;module&quot;,\n  },\n  plugins: [&quot;react&quot;, &quot;react-hooks&quot;],\n  extends: [\n    &quot;eslint:recommended&quot;,\n    &quot;plugin:react/recommended&quot;,\n    &quot;plugin:react-hooks/recommended&quot;,\n  ],\n  settings: {\n    react: {\n      version: &quot;detect&quot;,\n    },\n  },\n  rules: {\n    &quot;no-debugger&quot;: &quot;off&quot;,\n    &quot;no-console&quot;: &quot;off&quot;,\n    &quot;no-unused-vars&quot;: &quot;warn&quot;,\n    &quot;react/prop-types&quot;: &quot;warn&quot;,\n  },\n};</code>\n        </deckgo-highlight-code>\n      \n<p>Babel config is stored in <code class=\"language-text\">babel.config.js</code>:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/babel.config.js\nmodule.exports = {\n  presets: [&quot;@babel/preset-env&quot;, &quot;@babel/preset-react&quot;],\n};</code>\n        </deckgo-highlight-code>\n      \n<p>Webpack config for dev environment stored in <code class=\"language-text\">webpack.config.dev.js</code>:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/webpack.config.dev.js\nconst webpack = require(&quot;webpack&quot;);\nconst path = require(&quot;path&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\n\nprocess.env.NODE_ENV = &quot;development&quot;;\n\nmodule.exports = {\n  mode: &quot;development&quot;,\n  target: &quot;web&quot;,\n  devtool: &quot;cheap-module-source-map&quot;,\n  entry: [&quot;babel-polyfill&quot;, &quot;./src/index&quot;],\n  output: {\n    path: path.resolve(__dirname),\n    publicPath: &quot;/&quot;,\n    filename: &quot;bundle.js&quot;,\n  },\n  devServer: {\n    stats: &quot;minimal&quot;,\n    overlay: true,\n    historyApiFallback: true,\n    disableHostCheck: true,\n    headers: { &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot; },\n    https: false,\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      &quot;process.env.API_URL&quot;: JSON.stringify(&quot;http://localhost:8000/api/&quot;),\n    }),\n    new HtmlWebpackPlugin({\n      template: &quot;./src/index.html&quot;,\n      favicon: &quot;./src/favicon.ico&quot;,\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: &quot;babel-loader&quot;,\n          },\n          &quot;eslint-loader&quot;,\n        ],\n      },\n      {\n        test: /(\\.css)$/,\n        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],\n      },\n    ],\n  },\n};</code>\n        </deckgo-highlight-code>\n      \n<p>And edit <code class=\"language-text\">package.json</code> <code class=\"language-text\">scripts</code> section to make it look like this:</p>\n\n        <deckgo-highlight-code language=\"json\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/package.json\n{\n  &quot;name&quot;: &quot;djact&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Django + React&quot;,\n  &quot;scripts&quot;: {\n    &quot;start:dev&quot;: &quot;webpack-dev-server --config webpack.config.dev.js --port 3000&quot;,\n    &quot;clean:build&quot;: &quot;rimraf ../static &amp;&amp; mkdir ../static&quot;,\n    &quot;prebuild&quot;: &quot;run-p clean:build&quot;,\n    &quot;build&quot;: &quot;webpack --config webpack.config.prod.js&quot;,\n    &quot;postbuild&quot;: &quot;rimraf ../static/index.html&quot;\n  },\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;author&quot;: &quot;Constantine&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;dependencies&quot;: {\n    ...\n  },\n  &quot;devDependencies&quot;: {\n    ...\n  }\n}</code>\n        </deckgo-highlight-code>\n      \n<p>Now let's add a directory for the frontend sources: <code class=\"language-text\">mkdir -p src/components</code>. Also create entry point for React - <code class=\"language-text\">touch src/index.js</code>, with the following content:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/index.js\nimport React from &quot;react&quot;;\nimport { render } from &quot;react-dom&quot;;\nimport { BrowserRouter as Router } from &quot;react-router-dom&quot;;\nimport App from &quot;./components/App&quot;;\n\nrender(\n  &lt;Router&gt;\n    &lt;App /&gt;\n  &lt;/Router&gt;,\n  document.getElementById(&quot;app&quot;)\n);</code>\n        </deckgo-highlight-code>\n      \n<p>Create <code class=\"language-text\">html</code> template - <code class=\"language-text\">touch src/index.html</code>:</p>\n\n        <deckgo-highlight-code language=\"html\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">&lt;!-- frontend/src/index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;title&gt;Djact&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n      \n<p>You can add a favicon inside <code class=\"language-text\">src</code> directory if you're fancy.</p>\n<p>Then create the <code class=\"language-text\">App</code> component - <code class=\"language-text\">touch src/components/App.js</code>. Make it return something simple:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/App.js\nimport React from &quot;react&quot;;\n\nfunction App() {\n  return &lt;h1&gt;Hello from React!&lt;/h1&gt;;\n}\n\nexport default App;</code>\n        </deckgo-highlight-code>\n      \n<p>We can now test that our app is working with <code class=\"language-text\">yarn start:dev</code>. After navigating to <a href=\"http://localhost:3000\">http://localhost:3000</a> we should see a \"Hello from React!\" greeting!</p>\n<p>And here is a production <code class=\"language-text\">webpack.config.prod.js</code>:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/webpack.config.prod.js\nconst webpack = require(&quot;webpack&quot;);\nconst path = require(&quot;path&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);\n\nprocess.env.NODE_ENV = &quot;production&quot;;\n\nmodule.exports = {\n  mode: &quot;production&quot;,\n  target: &quot;web&quot;,\n  devtool: &quot;source-map&quot;,\n  entry: {\n    vendor: [&quot;react&quot;, &quot;react-dom&quot;, &quot;prop-types&quot;],\n    bundle: [&quot;babel-polyfill&quot;, &quot;./src/index&quot;],\n  },\n  output: {\n    path: path.resolve(__dirname, &quot;../static&quot;),\n    publicPath: &quot;/&quot;,\n    filename: &quot;[name].[contenthash].js&quot;,\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: &quot;[name].[contenthash].css&quot;,\n    }),\n    new webpack.DefinePlugin({\n      // This global makes sure React is built in prod mode.\n      &quot;process.env.NODE_ENV&quot;: JSON.stringify(process.env.NODE_ENV),\n      &quot;process.env.API_URL&quot;: JSON.stringify(&quot;http://localhost:8000/api/&quot;),\n    }),\n    new HtmlWebpackPlugin({\n      template: &quot;src/index.html&quot;,\n      favicon: &quot;./src/favicon.ico&quot;,\n      minify: {\n        // see https://github.com/kangax/html-minifier#options-quick-reference\n        removeComments: true,\n        collapseWhitespace: true,\n        removeRedundantAttributes: true,\n        useShortDoctype: true,\n        removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS: true,\n        minifyURLs: true,\n      },\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: &quot;babel-loader&quot;,\n          },\n          &quot;eslint-loader&quot;,\n        ],\n      },\n      {\n        test: /(\\.css)$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: &quot;css-loader&quot;,\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: &quot;postcss-loader&quot;,\n            options: {\n              plugins: () =&gt; [require(&quot;cssnano&quot;)],\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};</code>\n        </deckgo-highlight-code>\n      \n<p>Now we can <code class=\"language-text\">yarn build</code> and see our bundled file in <code class=\"language-text\">static</code> directory. And if we start our Django app via <code class=\"language-text\">python manage.py runserver 0.0.0.0:8000</code> we would see exactly the same thing but running in production mode.</p>\n<p>Our project directory should look like this:</p>\n\n        <deckgo-highlight-code   theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">.\nâ”œâ”€â”€ djact\nâ”‚   â”œâ”€â”€ apps\nâ”‚   â”‚   â”œâ”€â”€ authentication\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ apps.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ migrations\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ 0001_initial.py\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ __init__.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ models.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ serializers.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ urls.py\nâ”‚   â”‚   â”‚   â””â”€â”€ views.py\nâ”‚   â”‚   â””â”€â”€ core\nâ”‚   â”‚       â”œâ”€â”€ admin.py\nâ”‚   â”‚       â”œâ”€â”€ apps.py\nâ”‚   â”‚       â”œâ”€â”€ __init__.py\nâ”‚   â”‚       â”œâ”€â”€ migrations\nâ”‚   â”‚       â”‚   â””â”€â”€ __init__.py\nâ”‚   â”‚       â”œâ”€â”€ templates\nâ”‚   â”‚       â”‚   â””â”€â”€ index.html\nâ”‚   â”‚       â”œâ”€â”€ templatetags\nâ”‚   â”‚       â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚       â”‚   â””â”€â”€ load_react.py\nâ”‚   â”‚       â””â”€â”€ urls.py\nâ”‚   â”œâ”€â”€ asgi.py\nâ”‚   â”œâ”€â”€ db.sqlite3\nâ”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”œâ”€â”€ settings\nâ”‚   â”‚   â”œâ”€â”€ dev.py\nâ”‚   â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚   â””â”€â”€ settings.py\nâ”‚   â”œâ”€â”€ urls.py\nâ”‚   â””â”€â”€ wsgi.py\nâ”œâ”€â”€ .env\nâ”œâ”€â”€ .env.example\nâ”œâ”€â”€ frontend\nâ”‚   â”œâ”€â”€ babel.config.js\nâ”‚   â”œâ”€â”€ package.json\nâ”‚   â”œâ”€â”€ src\nâ”‚   â”‚   â”œâ”€â”€ components\nâ”‚   â”‚   â”‚   â””â”€â”€ App.js\nâ”‚   â”‚   â”œâ”€â”€ favicon.ico\nâ”‚   â”‚   â”œâ”€â”€ index.html\nâ”‚   â”‚   â””â”€â”€ index.js\nâ”‚   â”œâ”€â”€ webpack.config.dev.js\nâ”‚   â”œâ”€â”€ webpack.config.prod.js\nâ”‚   â””â”€â”€ yarn.lock\nâ”œâ”€â”€ log\nâ”‚   â””â”€â”€ django.log\nâ”œâ”€â”€ manage.py\nâ”œâ”€â”€ public\nâ”‚   â”œâ”€â”€ media\nâ”‚   â””â”€â”€ static\nâ”œâ”€â”€ requirements.txt\nâ””â”€â”€ static\n    â”œâ”€â”€ bundle.76ba356d74f1017eda2f.js\n    â”œâ”€â”€ bundle.76ba356d74f1017eda2f.js.map\n    â”œâ”€â”€ favicon.ico\n    â”œâ”€â”€ vendor.9245c714f84f4bbf6bdc.js\n    â””â”€â”€ vendor.9245c714f84f4bbf6bdc.js.map</code>\n        </deckgo-highlight-code>\n      \n<h1>API service</h1>\n<p>Inside <code class=\"language-text\">components</code> directory create <code class=\"language-text\">axiosApi.js</code>:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/api/axiosApi.js\nimport axios from &quot;axios&quot;;\n\nconst baseURL = process.env.API_URL;\nconst accessToken = localStorage.getItem(&quot;access_token&quot;);\n\nconst axiosAPI = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: accessToken ? &quot;JWT &quot; + accessToken : null,\n    &quot;Content-Type&quot;: &quot;application/json&quot;,\n    accept: &quot;application/json&quot;,\n  },\n});\n\naxiosAPI.interceptors.response.use(\n  (response) =&gt; response,\n  async (error) =&gt; {\n    const originalRequest = error.config;\n\n    // Prevent infinite loops\n    if (\n      error.response.status === 401 &amp;&amp;\n      originalRequest.url === baseURL + &quot;token/refresh/&quot;\n    ) {\n      window.location.href = &quot;/login/&quot;;\n      return Promise.reject(error);\n    }\n\n    if (\n      error.response.status === 401 &amp;&amp;\n      error.response.statusText === &quot;Unauthorized&quot;\n    ) {\n      const refresh = localStorage.getItem(&quot;refresh_token&quot;);\n\n      if (refresh) {\n        const tokenParts = JSON.parse(atob(refresh.split(&quot;.&quot;)[1]));\n\n        // exp date in token is expressed in seconds, while now() returns milliseconds:\n        const now = Math.ceil(Date.now() / 1000);\n\n        if (tokenParts.exp &gt; now) {\n          try {\n            const response = await axiosAPI.post(&quot;/token/refresh/&quot;, {\n              refresh,\n            });\n            setNewHeaders(response);\n            originalRequest.headers[&quot;Authorization&quot;] =\n              &quot;JWT &quot; + response.data.access;\n            return axiosAPI(originalRequest);\n          } catch (error) {\n            console.log(error);\n          }\n        } else {\n          console.log(&quot;Refresh token is expired&quot;, tokenParts.exp, now);\n          window.location.href = &quot;/login/&quot;;\n        }\n      } else {\n        console.log(&quot;Refresh token not available.&quot;);\n        window.location.href = &quot;/login/&quot;;\n      }\n    }\n\n    // specific error handling done elsewhere\n    return Promise.reject(error);\n  }\n);\n\nexport function setNewHeaders(response) {\n  axiosAPI.defaults.headers[&quot;Authorization&quot;] = &quot;JWT &quot; + response.data.access;\n  localStorage.setItem(&quot;access_token&quot;, response.data.access);\n  localStorage.setItem(&quot;refresh_token&quot;, response.data.refresh);\n}\n\nexport default axiosAPI;</code>\n        </deckgo-highlight-code>\n      \n<p>And <code class=\"language-text\">authenticationApi.js</code>:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/api/authenticationApi.js\nimport axiosAPI, { setNewHeaders } from &quot;./axiosApi&quot;;\n\nexport async function signUp(email, username, password) {\n  const response = await axiosAPI.post(&quot;users/create/&quot;, {\n    email,\n    username,\n    password,\n  });\n  localStorage.setItem(&quot;user&quot;, response.data);\n  return response;\n}\n\nexport async function obtainToken(username, password) {\n  const response = await axiosAPI.post(&quot;token/obtain/&quot;, {\n    username,\n    password,\n  });\n  setNewHeaders(response);\n  return response;\n}\n\nexport async function refreshToken(refresh) {\n  const response = await axiosAPI.post(&quot;token/refresh/&quot;, {\n    refresh,\n  });\n  setNewHeaders(response);\n  return response;\n}\n\n// eslint-disable-next-line\nexport async function logout(accessToken) {\n  localStorage.removeItem(&quot;access_token&quot;);\n  localStorage.removeItem(&quot;refresh_token&quot;);\n  // TODO: invalidate token on backend\n}\n\nexport const isAuthenticated = () =&gt; {\n  const token = localStorage.getItem(&quot;access_token&quot;);\n  return !!token;\n};</code>\n        </deckgo-highlight-code>\n      \n<h1>Redux</h1>\n<p>First create <code class=\"language-text\">redux</code> directory under <code class=\"language-text\">djact/frontend/src/</code> and put following files there:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/configureStore.dev.js\nimport { createStore, applyMiddleware, compose } from &quot;redux&quot;;\nimport rootReducer from &quot;./reducers&quot;;\nimport reduxImmutableStateInvariant from &quot;redux-immutable-state-invariant&quot;;\nimport thunk from &quot;redux-thunk&quot;;\n\nexport default function configureStore(initialState) {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\n  );\n}</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/configureStore.prod.js\nimport { createStore, applyMiddleware } from &quot;redux&quot;;\nimport rootReducer from &quot;./reducers&quot;;\nimport thunk from &quot;redux-thunk&quot;;\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, initialState, applyMiddleware(thunk));\n}</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/configureStore.js\n// Use CommonJS require below so we can dynamically import during build-time.\nif (process.env.NODE_ENV === &quot;production&quot;) {\n  module.exports = require(&quot;./configureStore.prod&quot;);\n} else {\n  module.exports = require(&quot;./configureStore.dev&quot;);\n}</code>\n        </deckgo-highlight-code>\n      \n<p>Store is configured, now to actions! Create <code class=\"language-text\">actions</code> directory inside <code class=\"language-text\">redux</code> with following files:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/actions/types.js\nexport const LOGIN_USER_SUCCESS = &quot;LOGIN_USER_SUCCESS&quot;;\nexport const LOGOUT_USER = &quot;LOGOUT_USER&quot;;</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/actions/auth.js\nimport { LOGIN_USER_SUCCESS, LOGOUT_USER } from &quot;./types&quot;;\nimport { obtainToken, logout } from &quot;../../components/api/authenticationApi&quot;;\n\nexport function loginUserSuccess(token) {\n  return { type: LOGIN_USER_SUCCESS, token };\n}\n\nexport function loginUser(username, password) {\n  return async function (dispatch) {\n    try {\n      const response = await obtainToken(username, password);\n      dispatch(loginUserSuccess(response.data.access));\n    } catch (error) {\n      console.log(&quot;Error obtaining token. &quot; + error);\n    }\n  };\n}\n\nexport function logoutUserSuccess() {\n  return { type: LOGOUT_USER };\n}\n\nexport function logoutUser() {\n  return async function (dispatch) {\n    await logout();\n    dispatch(logoutUserSuccess());\n  };\n}</code>\n        </deckgo-highlight-code>\n      \n<p>And the final step for redux is reducers themself, inside <code class=\"language-text\">frontend/src/redux/reducers</code> directory.</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/reducers/initialState.js\nexport default {\n  accessToken: localStorage.getItem(&quot;access_token&quot;),\n};</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/reducers/auth.js\nimport * as types from &quot;../actions/types&quot;;\nimport initialState from &quot;./initialState&quot;;\n\nexport default function authReducer(state = initialState.accessToken, action) {\n  switch (action.type) {\n    case types.LOGIN_USER_SUCCESS:\n      return action.token;\n    case types.LOGOUT_USER:\n      return &quot;&quot;;\n    default:\n      return state;\n  }\n}</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/redux/reducers/index.js\nimport { combineReducers } from &quot;redux&quot;;\nimport auth from &quot;./auth&quot;;\n\nconst rootReducer = combineReducers({\n  auth,\n});\n\nexport default rootReducer;</code>\n        </deckgo-highlight-code>\n      \n<h1>Components</h1>\n<h2>Authentication</h2>\n<p>We have our reducers ready and now we need to put them to use. So let's create <code class=\"language-text\">authentication</code> dir inside <code class=\"language-text\">frontend/src/components</code> and put the next three files there.</p>\n<p>This is will be our wrapper for private routes:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/authentication/PrivateRoute.js\nimport React from &quot;react&quot;;\nimport { Redirect, Route } from &quot;react-router-dom&quot;;\nimport PropTypes from &quot;prop-types&quot;;\nimport { isAuthenticated } from &quot;../api/authenticationApi&quot;;\n\nconst PrivateRoute = ({ component: Component, ...rest }) =&gt; (\n  &lt;Route\n    {...rest}\n    render={(props) =&gt;\n      isAuthenticated() ? (\n        &lt;Component {...props} /&gt;\n      ) : (\n        &lt;Redirect\n          to={{ pathname: &quot;/login&quot;, state: { from: props.location } }}\n        /&gt;\n      )\n    }\n  /&gt;\n);\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func.isRequired,\n  location: PropTypes.object,\n};\n\nexport default PrivateRoute;</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/authentication/LoginPage.js\nimport React, { useState } from &quot;react&quot;;\nimport { connect } from &quot;react-redux&quot;;\nimport PropTypes from &quot;prop-types&quot;;\nimport { loginUser } from &quot;../../redux/actions/auth&quot;;\n\nconst LoginPage = ({ loginUser, history }) =&gt; {\n  const [state, setState] = useState({\n    username: &quot;&quot;,\n    password: &quot;&quot;,\n  });\n\n  const handleChange = (event) =&gt; {\n    const { name, value } = event.target;\n    setState({ ...state, [name]: value });\n  };\n\n  const login = async (event) =&gt; {\n    event.preventDefault();\n    const { username, password } = state;\n\n    await loginUser(username, password);\n    history.push(&quot;/&quot;);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Login page&lt;/h1&gt;\n      &lt;form onSubmit={login}&gt;\n        &lt;label&gt;\n          Username:\n          &lt;input\n            name=&quot;username&quot;\n            type=&quot;text&quot;\n            value={state.username}\n            onChange={handleChange}\n          /&gt;\n        &lt;/label&gt;\n        &lt;label&gt;\n          Password:\n          &lt;input\n            name=&quot;password&quot;\n            type=&quot;password&quot;\n            value={state.password}\n            onChange={handleChange}\n          /&gt;\n        &lt;/label&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n};\n\nLoginPage.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapDispatchToProps = {\n  loginUser,\n};\n\nexport default connect(null, mapDispatchToProps)(LoginPage);</code>\n        </deckgo-highlight-code>\n      \n<p>And the Sign Up component will be simple because I was lazy to implement this but it should be easy enough:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/authentication/SignUpPage.js\nimport React from &quot;react&quot;;\nimport { useHistory } from &quot;react-router-dom&quot;;\n\nconst SignUpPage = () =&gt; {\n  const history = useHistory();\n\n  const handleClick = () =&gt; {\n    history.push(&quot;/&quot;);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Sign Up page&lt;/h1&gt;\n      &lt;button onClick={handleClick}&gt;sign up&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default SignUpPage;</code>\n        </deckgo-highlight-code>\n      \n<h2>Common</h2>\n<p>Common components will contain only Header. But in theory there could live everything.. you know.. common.</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/common/Header.js\nimport React from &quot;react&quot;;\nimport { connect } from &quot;react-redux&quot;;\nimport PropTypes from &quot;prop-types&quot;;\nimport { NavLink, useHistory } from &quot;react-router-dom&quot;;\nimport { logoutUser } from &quot;../../redux/actions/auth&quot;;\n\nconst Header = ({ accessToken, logoutUser }) =&gt; {\n  const history = useHistory();\n\n  const handleLogout = async () =&gt; {\n    await logoutUser();\n    history.push(&quot;login/&quot;);\n  };\n\n  return (\n    &lt;nav&gt;\n      {accessToken ? (\n        &lt;&gt;\n          &lt;NavLink to=&quot;/&quot;&gt;Profile&lt;/NavLink&gt;\n          {&quot; | &quot;}\n          &lt;NavLink to=&quot;/logout&quot; onClick={handleLogout}&gt;\n            Logout\n          &lt;/NavLink&gt;\n        &lt;/&gt;\n      ) : (\n        &lt;&gt;\n          &lt;NavLink to=&quot;/login&quot;&gt;Login&lt;/NavLink&gt;\n          {&quot; | &quot;}\n          &lt;NavLink to=&quot;/sign-up&quot;&gt;SignUp&lt;/NavLink&gt;\n        &lt;/&gt;\n      )}\n    &lt;/nav&gt;\n  );\n};\n\nHeader.propTypes = {\n  accessToken: PropTypes.string,\n  logoutUser: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    accessToken: state.auth,\n  };\n}\n\nconst mapDispatchToProps = {\n  logoutUser,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);</code>\n        </deckgo-highlight-code>\n      \n<h2>Core</h2>\n<p>And the final piece is core components with application logic. Here we'll have our protected page:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/core/ProfilePage.js\nimport React from &quot;react&quot;;\nimport axiosAPI from &quot;../api/axiosApi&quot;;\n\nconst ProfilePage = () =&gt; {\n  const handleClick = async () =&gt; {\n    const response = await axiosAPI.get(&quot;protected/&quot;);\n    alert(JSON.stringify(response.data));\n  };\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Profile page&lt;/h1&gt;\n      &lt;p&gt;Only logged in users should see this&lt;/p&gt;\n      &lt;button onClick={handleClick}&gt;GET protected&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProfilePage;</code>\n        </deckgo-highlight-code>\n      \n<p>Last thing to do is to update our <code class=\"language-text\">App.js</code>:</p>\n\n        <deckgo-highlight-code language=\"js\"  theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// frontend/src/components/App.js\nimport React from &quot;react&quot;;\nimport { Route, Switch } from &quot;react-router-dom&quot;;\n\nimport PageNotFound from &quot;./PageNotFound&quot;;\nimport Header from &quot;./common/Header&quot;;\nimport ProfilePage from &quot;./core/ProfilePage&quot;;\nimport PrivateRoute from &quot;./authentication/PrivateRoute&quot;;\nimport LoginPage from &quot;./authentication/LoginPage&quot;;\nimport SignUpPage from &quot;./authentication/SignUpPage&quot;;\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      &lt;Switch&gt;\n        &lt;PrivateRoute exact path=&quot;/&quot; component={ProfilePage} /&gt;\n        &lt;Route path=&quot;/login&quot; component={LoginPage} /&gt;\n        &lt;Route path=&quot;/sign-up&quot; component={SignUpPage} /&gt;\n        &lt;Route component={PageNotFound} /&gt;\n      &lt;/Switch&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;</code>\n        </deckgo-highlight-code>\n      \n<p>Our final project structure should look like this:</p>\n\n        <deckgo-highlight-code   theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">.\nâ”œâ”€â”€ blogpost.md\nâ”œâ”€â”€ djact\nâ”‚   â”œâ”€â”€ apps\nâ”‚   â”‚   â”œâ”€â”€ authentication\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ apps.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ migrations\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ 0001_initial.py\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ __init__.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ models.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ serializers.py\nâ”‚   â”‚   â”‚   â”œâ”€â”€ urls.py\nâ”‚   â”‚   â”‚   â””â”€â”€ views.py\nâ”‚   â”‚   â””â”€â”€ core\nâ”‚   â”‚       â”œâ”€â”€ admin.py\nâ”‚   â”‚       â”œâ”€â”€ apps.py\nâ”‚   â”‚       â”œâ”€â”€ __init__.py\nâ”‚   â”‚       â”œâ”€â”€ migrations\nâ”‚   â”‚       â”‚   â””â”€â”€ __init__.py\nâ”‚   â”‚       â”œâ”€â”€ templates\nâ”‚   â”‚       â”‚   â””â”€â”€ index.html\nâ”‚   â”‚       â”œâ”€â”€ templatetags\nâ”‚   â”‚       â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚       â”‚   â””â”€â”€ load_react.py\nâ”‚   â”‚       â””â”€â”€ urls.py\nâ”‚   â”œâ”€â”€ asgi.py\nâ”‚   â”œâ”€â”€ db.sqlite3\nâ”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”œâ”€â”€ settings\nâ”‚   â”‚   â”œâ”€â”€ dev.py\nâ”‚   â”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”‚   â””â”€â”€ settings.py\nâ”‚   â”œâ”€â”€ urls.py\nâ”‚   â””â”€â”€ wsgi.py\nâ”œâ”€â”€ .env\nâ”œâ”€â”€ .env.example\nâ”œâ”€â”€ frontend\nâ”‚   â”œâ”€â”€ babel.config.js\nâ”‚   â”œâ”€â”€ package.json\nâ”‚   â”œâ”€â”€ src\nâ”‚   â”‚   â”œâ”€â”€ components\nâ”‚   â”‚   â”‚   â”œâ”€â”€ api\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ authenticationApi.js\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ axiosApi.js\nâ”‚   â”‚   â”‚   â”œâ”€â”€ App.js\nâ”‚   â”‚   â”‚   â”œâ”€â”€ authentication\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ LoginPage.js\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ PrivateRoute.js\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ SignUpPage.js\nâ”‚   â”‚   â”‚   â”œâ”€â”€ common\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ Header.js\nâ”‚   â”‚   â”‚   â”œâ”€â”€ core\nâ”‚   â”‚   â”‚   â”‚   â””â”€â”€ ProfilePage.js\nâ”‚   â”‚   â”‚   â””â”€â”€ PageNotFound.js\nâ”‚   â”‚   â”œâ”€â”€ favicon.ico\nâ”‚   â”‚   â”œâ”€â”€ index.html\nâ”‚   â”‚   â”œâ”€â”€ index.js\nâ”‚   â”‚   â””â”€â”€ redux\nâ”‚   â”‚       â”œâ”€â”€ actions\nâ”‚   â”‚       â”‚   â”œâ”€â”€ auth.js\nâ”‚   â”‚       â”‚   â””â”€â”€ types.js\nâ”‚   â”‚       â”œâ”€â”€ configureStore.dev.js\nâ”‚   â”‚       â”œâ”€â”€ configureStore.js\nâ”‚   â”‚       â”œâ”€â”€ configureStore.prod.js\nâ”‚   â”‚       â””â”€â”€ reducers\nâ”‚   â”‚           â”œâ”€â”€ auth.js\nâ”‚   â”‚           â”œâ”€â”€ index.js\nâ”‚   â”‚           â””â”€â”€ initialState.js\nâ”‚   â”œâ”€â”€ webpack.config.dev.js\nâ”‚   â”œâ”€â”€ webpack.config.prod.js\nâ”‚   â”œâ”€â”€ yarn-error.log\nâ”‚   â””â”€â”€ yarn.lock\nâ”œâ”€â”€ log\nâ”‚   â””â”€â”€ django.log\nâ”œâ”€â”€ manage.py\nâ”œâ”€â”€ public\nâ”‚   â”œâ”€â”€ media\nâ”‚   â””â”€â”€ static\nâ”œâ”€â”€ requirements.txt\nâ””â”€â”€ static\n    â”œâ”€â”€ bundle.c86ace9a42dd5bd70a59.js\n    â”œâ”€â”€ bundle.c86ace9a42dd5bd70a59.js.map\n    â”œâ”€â”€ favicon.ico\n    â”œâ”€â”€ vendor.0d40e04c29796a70dc89.js\n    â””â”€â”€ vendor.0d40e04c29796a70dc89.js.map</code>\n        </deckgo-highlight-code>\n      \n<h1>Running</h1>\n<p>Now, set environment variables <code class=\"language-text\">export $(cat .env | xargs)</code>. Build the frontend part <code class=\"language-text\">cd frontend &amp;&amp; yarn:build</code>. Create superuser for testing with <code class=\"language-text\">cd ../ &amp;&amp; python manage.py createsuperuser</code> and follow instructions. Run Django app <code class=\"language-text\">python manage.py runserver</code> and navigate to <a href=\"http://localhost:8000\">http://localhost:8000</a>. We should see our login page. Enter credentials you provided when created superuser and we'll get to a protected Profile page. If we click on a <code class=\"language-text\">GET protected</code> button we would see the alert with response from the server.</p>\n<p>And that's it! If you're came all the way down here.. wow! And if you've actually implemented all of this.. WOW!! Outstanding job, my friend! Hope you've learned new things or solved a problem of yours ðŸš€</p>\n<p>Thank you and happy coding!</p>\n<h1>Resources</h1>\n<p>As I promised at the beginning of this article, here is a list of every resource that helped me to build this whole thing:</p>\n<p><a href=\"https://pluralsight.com/\">PluralSight</a> courses:</p>\n<ul>\n<li><a href=\"https://app.pluralsight.com/library/courses/react-redux-react-router-es6/table-of-contents\">Building Applications with React and Redux</a> by <a href=\"https://app.pluralsight.com/profile/author/cory-house\">Cory House</a></li>\n<li><a href=\"https://app.pluralsight.com/library/courses/react-auth0-authentication-security/table-of-contents\">Securing React Apps with Auth0</a> by <a href=\"https://app.pluralsight.com/profile/author/cory-house\">Cory House</a></li>\n<li><a href=\"https://app.pluralsight.com/library/courses/reactjs-advanced/table-of-contents\">Advanced React.js</a> by <a href=\"https://app.pluralsight.com/profile/author/samer-buna\">Samer Buna</a></li>\n</ul>\n<p>Articles:</p>\n<ul>\n<li><a href=\"https://hackernoon.com/110percent-complete-jwt-authentication-with-django-and-react-2020-iejq34ta\">110% Complete JWT Authentication with Django &#x26; Reactâ€Š-â€Š2020</a> by <a href=\"https://hackernoon.com/u/Toruitas\">Stuart Leitch</a></li>\n<li><a href=\"https://jasonwatmore.com/post/2017/12/07/react-redux-jwt-authentication-tutorial-example\">React + Redux - JWT Authentication Tutorial &#x26; Example</a> by <a href=\"https://jasonwatmore.com/\">Jason Watmore</a></li>\n<li><a href=\"https://levelup.gitconnected.com/using-jwt-in-your-react-redux-app-for-authorization-d31be51a50d2\">Using JWT in Your React+Redux App for Authorization</a> by <a href=\"https://levelup.gitconnected.com/@leizl.samano\">Leizl Samano</a></li>\n</ul>","timeToRead":24},"file":null},"pageContext":{"imagePath":null,"prev":{"frontmatter":{"path":"/2020-07-04-kwargs","title":"** or arguments unpacking in Python","date":"July 04, 2020","author":"Constantine Yarushkin","description":"How you could use arguments unpacking","image":"markus-spiske-n2M2g5G7b88-unsplash.jpg","tags":"python, django, beginners"}},"next":{"frontmatter":{"path":"/2020-03-28-str-with-foreign-key","title":"Why ForeignKey reference in Django model's __str__ method is a bad idea","date":"March 28, 2020","author":"Constantine Yarushkin","description":"Cutting database queries by not referencing Foreign Keys","image":"israel-palacio-ImcUkZ72oUs-unsplash.jpg","tags":"python, django, database optimization"}}}}}